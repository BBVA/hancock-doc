(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{348:function(t,a,s){"use strict";s.r(a);var n=s(37),e=Object(n.a)({},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"transaction-service"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#transaction-service","aria-hidden":"true"}},[t._v("#")]),t._v(" Transaction Service")]),t._v(" "),s("p",[t._v("The Transaction Service provides some methods to let the user to send transactions in different conditions.")]),t._v(" "),s("p",[t._v("The service needs a "),s("a",{attrs:{href:"../java/#using-all-together"}},[t._v("config object")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("EthereumTransactionService")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("HancockConfig config"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("config "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" config"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"send"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#send","aria-hidden":"true"}},[t._v("#")]),t._v(" Send")]),t._v(" "),s("p",[t._v("Send a transaction to the network according to the specification in the txConfig. Could be signed and then sent, sent to a sign provider before send it or send it assuming that the node has this account unlocked.")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@param")]),t._v(" rawtx    A raw transaction which will be sent to Ethereum\n  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@param")]),t._v(" txConfig Options which will be used to config the transaction\n  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" @"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" The result of the request\n  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" @"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" Exception\n\nethereumClient"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getTransactionService")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("send")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rawtx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" txConfig"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h2",{attrs:{id:"sign-message"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sign-message","aria-hidden":"true"}},[t._v("#")]),t._v(" Sign Message")]),t._v(" "),s("p",[t._v("Sign a given message with the private key pass as a parameter.")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@param")]),t._v(" message    A raw message which will be signed\n  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@param")]),t._v(" privateKey The "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" key with which the raw message will be signed\n  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" @"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" The signed message as hex string\n\nethereumClient"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getTransactionService")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("signMessage")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("message"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" privateKey"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h2",{attrs:{id:"sign-personal-message"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sign-personal-message","aria-hidden":"true"}},[t._v("#")]),t._v(" Sign Personal Message")]),t._v(" "),s("p",[t._v("Sign a raw personal message with the given private key using https://github.com/ethereum/EIPs/blob/master/EIPS/eip-712.md")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@param")]),t._v(" message    A raw message which will be signed\n  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@param")]),t._v(" privateKey The "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" key with which the raw message will be signed\n  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" @"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" The signed message as hex string\n\nethereumClient"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getTransactionService")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("signPersonalMessage")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("message"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" privateKey"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h2",{attrs:{id:"sign-transaction"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sign-transaction","aria-hidden":"true"}},[t._v("#")]),t._v(" Sign Transaction")]),t._v(" "),s("p",[t._v("When we want to send a Transaction to the DLT, we have to sign it previosly with the private key of the address used as from if the node does not have the account unlocked.")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@param")]),t._v(" rawTransaction A raw transaction which will be signed with the privatekey\n  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@param")]),t._v(" privateKey     The "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" key with which the raw transaction will be signed\n  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" @"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" The signed transaction\n\nethereumClient"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getTransactionService")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("signTransaction")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rawTransaction"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" privateKey"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h2",{attrs:{id:"send-raw-transaction"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#send-raw-transaction","aria-hidden":"true"}},[t._v("#")]),t._v(" Send Raw Transaction")]),t._v(" "),s("p",[t._v("Send a transaction to the DLT assuming that the node that receive the transaction has the account used as from unlocked, that means that all transaction received for the node with this account as from will be processed if they are correct.")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@param")]),t._v(" rawTx A raw transaction which will be sent to the network\n  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" @"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" The result of the transaction\n  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" @"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" HancockException\n\nethereumClient"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getTransactionService")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sendRawTransaction")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rawTx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h2",{attrs:{id:"send-to-sign-provider"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#send-to-sign-provider","aria-hidden":"true"}},[t._v("#")]),t._v(" Send To Sign Provider")]),t._v(" "),s("p",[t._v("Send a transaction to be sign in a third party sing provider and once signed, it will be send to the DLT.")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@param")]),t._v(" rawTx    A raw transaction which will be signed by the sign provider\n  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@param")]),t._v(" txConfig Options which will be used to config the transaction "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("provider and callBack "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Options")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("optional"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" @"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" The result of the request\n  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" @"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" HancockException\n\nethereumClient"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getTransactionService")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sendToSignProvider")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rawTx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" txConfig"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h2",{attrs:{id:"send-signed-transaction"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#send-signed-transaction","aria-hidden":"true"}},[t._v("#")]),t._v(" Send Signed Transaction")]),t._v(" "),s("p",[t._v("Send a transaction that has been signed previosly to the WalletHub service.")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("\n  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@param")]),t._v(" signedTransaction A signed transaction which will be send to the network\n  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@param")]),t._v(" txConfig          Options which will be used to config the transaction\n  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" @"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" The result of the transaction\n  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" @"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" Exception\n  \nethereumClient"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getTransactionService")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sendSignedTransaction")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("signedTransaction"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" txConfig"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h2",{attrs:{id:"send-signed-transaction-locally"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#send-signed-transaction-locally","aria-hidden":"true"}},[t._v("#")]),t._v(" Send Signed Transaction Locally")]),t._v(" "),s("p",[t._v("Send a transaction to the DLT, given in the config, that has been signed previosly.")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("\n  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@param")]),t._v(" signedTransaction A signed transaction which will be send to the network\n  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" @"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" The transaction hash\n  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" @"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" InterruptedException\n  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" @"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" ExecutionException\n  \nhancockClient"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getTransactionService")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sendSignedTransactionLocally")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("signedTransaction"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h2",{attrs:{id:"subscribe"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#subscribe","aria-hidden":"true"}},[t._v("#")]),t._v(" Subscribe")]),t._v(" "),s("p",[t._v('Create a websocket subscription with the broker to watch transactions of type "transactions" in the network.')]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("\n  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@param")]),t._v(" addresses An array of address that will be added to the watch list\n  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@param")]),t._v(" consumer  A consumer plugin previously configured in hancock that will handle each received event\n  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" @"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" A HancockSocket object which can add "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("subscriptions")]),t._v(" and listen incoming message\n  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" @"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" HancockException\n\nethereumClient"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getTransactionService")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("subscribe")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("addresses"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" consumer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n´´´\n\n")])])])])},[],!1,null,null,null);a.default=e.exports}}]);