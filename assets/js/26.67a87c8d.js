(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{346:function(t,a,s){"use strict";s.r(a);var n=s(37),e=Object(n.a)({},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"transaction-service"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#transaction-service","aria-hidden":"true"}},[t._v("#")]),t._v(" Transaction Service")]),t._v(" "),s("p",[t._v("The Transfer Service provides some methods to let the user to send transactions between two addresses, as well as subscribe to listen for transfers and adapt transfers.")]),t._v(" "),s("p",[t._v("The service needs a "),s("a",{attrs:{href:"../java/#using-all-together"}},[t._v("config object")]),t._v(" and a service of ethereum transactions, that is included in EthereumClient.")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("EthereumTokenService")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("HancockConfig config"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EthereumTransactionService transactionClient"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("config "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" config"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("transactionClient "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" transactionClient"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"send"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#send","aria-hidden":"true"}},[t._v("#")]),t._v(" Send")]),t._v(" "),s("p",[t._v("Send a transaction of ether between to accounts to the network according to the specification in the txConfig. Could be signed and then sent, sent to a sign provider before send it to the dlt or sent it assuming that the node has this account unlocked. Internally it call to the send of Transaction service.")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("\n  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@param")]),t._v(" tx       Data of the transaction "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sender address"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" receiver addres"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" amount of ether"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@param")]),t._v(" txConfig Configuration of how the transaction will be send to the network\n  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" @"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" The result of the request\n  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" @"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" Exception\n\nethereumClient"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getTransferService")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("send")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" txConfig"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h2",{attrs:{id:"adapt-transfer"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#adapt-transfer","aria-hidden":"true"}},[t._v("#")]),t._v(" Adapt Transfer")]),t._v(" "),s("p",[t._v("Adapt a transaction to get all the info necessary before send it, that is: nonce, gas and gasPrice. Return the transaction ready to be signed.")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("\n  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@param")]),t._v(" txRequest The transaction with the minimum data to be fill "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("From"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" To"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" @"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" The transaction with all the data fill "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Gas"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" GasPrice"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Nonce"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" @"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" Exception\n\nethereumClient"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getTransferService")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("adaptTransfer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" txConfig"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h2",{attrs:{id:"subscribe"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#subscribe","aria-hidden":"true"}},[t._v("#")]),t._v(" Subscribe")]),t._v(" "),s("p",[t._v('Create a websocket subscription with the broker to watch transactions of type "transfer" in the network.')]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("\n  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@param")]),t._v(" addresses An array of address that will be added to the watch list\n  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@param")]),t._v(" consumer  A consumer plugin previously configured in hancock that will handle each received event\n  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" @"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" A HancockSocket object which can add "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("subscriptions")]),t._v(" and listen incoming message\n  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" @"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" HancockException\n\nethereumClient"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getTransferService")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("subscribe")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("addresses"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" consumer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n´´´\n\n")])])])])},[],!1,null,null,null);a.default=e.exports}}]);